<!--header-->
<!-- Auto generated do not modify between `header` and `/header` -->

# <a href="https://maslosoft.com/gazebo/"><img src="https://maslosoft.com/gazebo/gazebo.svg" style="height:24px;" alt="Gazebo Logo"></a> <a href="https://maslosoft.com/gazebo/">Maslosoft Gazebo</a>
<a href="https://maslosoft.com/gazebo/">_Plugin container_</a>

<a href="https://packagist.org/packages/maslosoft/gazebo" title="Latest Stable Version">
<img src="https://poser.pugx.org/maslosoft/gazebo/v/stable.svg" alt="Latest Stable Version" style="height: 20px;"/>
</a>
<a href="https://packagist.org/packages/maslosoft/gazebo" title="License">
<img src="https://poser.pugx.org/maslosoft/gazebo/license.svg" alt="License" style="height: 20px;"/>
</a>
<a href="https://scrutinizer-ci.com/g/Maslosoft/Gazebo/?branch=master">
	<img src="https://scrutinizer-ci.com/g/Maslosoft/Gazebo/badges/quality-score.png?b=master" alt="Scrutinizer Code Quality"/>
</a>
<a href="https://scrutinizer-ci.com/g/Maslosoft/Gazebo/?branch=master">
	<img src="https://scrutinizer-ci.com/g/Maslosoft/Gazebo/badges/coverage.png?b=master" alt="Code Coverage" />
</a>

### Quick Install
```bash
composer require maslosoft/gazebo
```

### Documentation

<a href="https://maslosoft.com/gazebo/docs/">Full Gazebo Documentation</a>




# Plugin container

When developing plugins for Your application, these might
come in very different kids. This library helps managing
plugins by providing sets of instantiated plugins
required for various scenarios. All plugins for component
using gazebo are configured as a one simple list - thus
allowing for easy adding and removing them - without
bothering which plugin type should go where.

<!--/header-->

### Usage

```php
//Plugins
class WaterPlugin implements WetInterface
{
	public $name = 'foo';
}
class MetalPlugin implements HardInterface
{
	public $options = false;
}
class GenericPlugin
{

}
// Config:
$config = [
			TestModel::class => [
				WaterPlugin::class,
				[
					'class' => MetalPlugin::class,
					'options' => true
				],
				GenericPlugin::class,
			],
		];

// Create plugins but only for selected interfaces
$plugins = (new PluginFactory())->instance($this->config, $model, [
			HardInterface::class,
			WetInterface::class
		]);


var_dump($plugins);

// Created flyweight instances of two plugins
//array(2) {
//	[0] => class Maslosoft\GazeboTest\Model\WaterPlugin#181 (1) {
//		public $name => string(3) "foo"
//	}
//	[1] => class Maslosoft\GazeboTest\Model\MetalPlugin#182 (2) {
//		public $options => bool(true)
//		public $class => string(38) "Maslosoft\GazeboTest\Model\MetalPlugin"
//	}
//}
```